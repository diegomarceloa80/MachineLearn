---
title: "Text Classification"
code-fold: false
---

# Importar librerías
```{python}
import pandas as pd
from sklearn.datasets import fetch_20newsgroups
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
from sklearn.pipeline import Pipeline
import matplotlib.pyplot as plt
# Vectores TF-IDF y Count
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import CountVectorizer

import nltk
from nltk.corpus import stopwords
nltk.download('stopwords') # necessary for removal of stop words
nltk.download('wordnet') # necessary for lemmatization
```
# Cargar dataset
```{python}
categorias = ['comp.graphics', 'comp.sys.mac.hardware', 'rec.sport.baseball', 'talk.politics.misc']
newsgroups = fetch_20newsgroups(subset='train', categories=categorias, remove=('headers', 'footers', 'quotes'))
print(newsgroups.target_names)
```
# Feature y target
```{python}
X_text = newsgroups.data
y = newsgroups.target   
```
# train-test split
```{python}
X_train, X_test, y_train, y_test = train_test_split(X_text, y, test_size=0.2, random_state=42, stratify=y)
```
# Vectorización de texto
```{python}
stopwords = stopwords.words("english")
#stopwords.append('blabla')# añadir stopwords personalizadas
#vectorizer = TfidfVectorizer()  # Cambiar a CountVectorizer() para usar conteo de palabras
vectorizer = CountVectorizer(stop_words=stopwords)  # Cambiar a CountVectorizer() para usar conteo de palabras
```
# Modelo
```{python}
model = MultinomialNB()
```
# pipeline 
```{python}
pipeline = Pipeline([
    ('vectorizer', vectorizer),  # Cambiar a CountVectorizer() para usar conteo de palabras
    ('classifier', model)
])   
```
# Fit del modelo
```{python}
pipeline.fit(X_train, y_train)
```
# Predicciones
```{python}
y_pred = pipeline.predict(X_test)   
```
# Reporte de clasificación
```{python}
print("Reporte de clasificación\n", classification_report(y_test, y_pred, target_names=newsgroups.target_names))
```

# Matriz de confusión
```{python}
conf_matrix = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=newsgroups.target_names)
disp.plot(cmap=plt.cm.Blues)
```